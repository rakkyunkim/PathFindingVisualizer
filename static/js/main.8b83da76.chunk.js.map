{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/BFS.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","onMouseLeave","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","state","mouseIsPressed","startNodePressed","finishNodePressed","visualFinished","visualInProgress","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","getNewGridWithStartNode","getNewGridWithFinishNode","slice","newNode","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","reset","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","endNode","queue","currNode","BFS","nodesInShortestPathOrderBFS","getNodesInShortestPathOrderBFS","withWall","onClick","visualizeDijkstra","visualizeBFS","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","handleMouseLeave","currentRow","createNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b83da76.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      onMouseLeave,\n      row,\n    } = this.props;\n    const extraClassName = isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : ''\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}\n        onMouseLeave={() => onMouseLeave(row, col)}\n        >\n      </div>\n    );\n  }\n}\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  //stores neighbor nodes of node that is not yet visited.\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    //increment distance\n    neighbor.distance = node.distance + 1;\n    //set the previousNode for shortest path calculation later.\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  //extract column and row number from current node.\n  const {col, row} = node;\n  //insert neighboring nodes if not out of bounds\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  //only store neighbor that isn't visited yet.\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","\r\n//run breath-first search algorithm on grid.\r\nexport function BFS(grid, startNode, endNode){\r\n    const visitedNodesInOrder = [];\r\n    if(startNode === endNode){\r\n        return visitedNodesInOrder;\r\n    }\r\n    let queue = [startNode];\r\n    visitedNodesInOrder.push(startNode);\r\n    startNode.isVisited = true;\r\n\r\n    while(queue){\r\n        let currNode = queue.shift();\r\n        if(currNode.isWall) continue;\r\n        let neighbors = getUnvisitedNeighbors(currNode, grid);\r\n\r\n        for(let i = 0; i < neighbors.length; i++){\r\n            if(neighbors[i].isWall) continue;\r\n            queue.push(neighbors[i]);\r\n            visitedNodesInOrder.push(neighbors[i]);\r\n            neighbors[i].isVisited = true;\r\n            neighbors[i].previousNode = currNode;\r\n            if(neighbors[i] === endNode){\r\n                return visitedNodesInOrder;\r\n            }\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n// get all the surrounding neighbors of a node.\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  //extract column and row number from current node.\r\n  const {col, row} = node;\r\n  //insert neighboring nodes if not out of bounds\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  //only store neighbor that isn't visited yet.\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\n// back-track using previous node.\r\nexport function getNodesInShortestPathOrderBFS(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }\r\n  ","import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\nimport {BFS, getNodesInShortestPathOrderBFS} from '../algorithms/BFS';\n\nimport './PathfindingVisualizer.css';\n\nlet START_NODE_ROW = 10;\nlet START_NODE_COL = 15;\nlet FINISH_NODE_ROW = 10;\nlet FINISH_NODE_COL = 35;\n\nconst GRID_ROW = 30;\nconst GRID_COL = 60;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      startNodePressed: false,\n      finishNodePressed: false,\n      visualFinished: false,\n      visualInProgress: false\n    };\n  }\n\n  //set the grid when the program starts running. \n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({grid});\n  }\n\n  //set up the wall with the mouse click.\n  handleMouseDown(row, col) {\n    if(this.state.visualInProgress) return;\n    if(row === START_NODE_ROW && col === START_NODE_COL){\n      this.setState({startNodePressed: true, mouseIsPressed: true});\n    } else if(row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\n      this.setState({finishNodePressed: true, mouseIsPressed: true});\n    }else{\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n      this.setState({grid: newGrid, mouseIsPressed: true});\n    }\n  }\n\n  //dragging feature\n  handleMouseEnter(row, col) {\n    if(this.state.visualInProgress) return;\n    if (!this.state.mouseIsPressed) return;\n    if (this.state.startNodePressed === true){\n      const newGrid = getNewGridWithStartNode(this.state.grid, row, col);\n      this.setState({grid: newGrid});\n    }else if(this.state.finishNodePressed === true){\n      const newGrid = getNewGridWithFinishNode(this.state.grid, row, col);\n      this.setState({grid: newGrid});\n    }\n    else{\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n      this.setState({grid: newGrid});\n    }\n  }\n  handleMouseLeave(row, col) {\n    if (this.state.startNodePressed){\n      const newGrid = this.state.grid.slice();\n      const node = newGrid[row][col];\n      const newNode = {\n        ...node,\n        isStart: !node.isStart,\n      };\n      newGrid[row][col] = newNode;\n      this.setState({grid: newGrid});\n    } else if (this.state.finishNodePressed){\n      const newGrid = this.state.grid.slice();\n      const node = newGrid[row][col];\n      const newNode = {\n        ...node,\n        isFinish: !node.isFinish,\n      };\n      newGrid[row][col] = newNode;\n      this.setState({grid: newGrid});\n    }\n  }\n\n  handleMouseUp() {\n    this.setState({mouseIsPressed: false});\n    this.setState({startNodePressed: false});\n    this.setState({finishNodePressed: false});\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 1; i < visitedNodesInOrder.length; i++) {\n      //if reached the finish node, start animating shortest path\n      if (i === visitedNodesInOrder.length - 1) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 5 * i);\n        return;\n      }\n      //change the style to visited node.\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 5 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 1; i < nodesInShortestPathOrder.length - 1; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 50 * i);\n    }\n    this.setState({visualInProgress: false});\n    this.setState({visualFinished: true});\n  }\n\n  visualizeDijkstra() {\n    if(this.state.visualInProgress === true) return;\n    if(this.state.visualFinished){\n      //reset\n      this.reset(true);\n      this.setState({visualFinished: false});\n    }\n    this.setState({visualInProgress: true});\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  visualizeBFS(){\n    if(this.state.visualInProgress === true) return;\n    if(this.state.visualFinished){\n      //reset\n      this.reset(true);\n      this.setState({visualFinished: false});\n    }\n    this.setState({visualInProgress: true});\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = BFS(grid, startNode, finishNode);\n    const nodesInShortestPathOrderBFS = getNodesInShortestPathOrderBFS(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrderBFS);\n  }\n  //reset the grid\n  reset(withWall){\n    if(withWall){\n      for (const row of this.state.grid) {\n        for (const node of row) {\n          node.isVisited = false;\n          node.previousNode = null;\n          node.distance = Infinity;\n          if(!node.isWall && !node.isStart && !node.isFinish){\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              'node node';\n          }\n        }\n      }\n    }else{\n      for (const row of this.state.grid) {\n        for (const node of row) {\n          node.isVisited = false;\n          node.previousNode = null;\n          node.distance = Infinity;\n          node.isWall = false;\n          if(!node.isStart && !node.isFinish){\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              'node node';\n          }\n        }\n      }\n    }\n  }\n  render() {\n    const {grid, mouseIsPressed} = this.state;\n\n    return (\n      <>\n        <button onClick={() => this.visualizeDijkstra()}>\n          Visualize Dijkstra's Algorithm\n        </button>\n        <button onClick={() => this.visualizeBFS()}>\n          Visualize BFS Algorithm\n        </button>\n        <button onClick={() => this.reset(true)}>\n          Reset Board w/ Walls\n        </button>\n        <button onClick={() => this.reset(false)}>\n          Reset Board w/o Walls\n        </button>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div className=\"row\" key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      onMouseLeave={(row, col) => this.handleMouseLeave(row, col)}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < GRID_ROW; row++) {\n    const currentRow = [];\n    for (let col = 0; col < GRID_COL; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\n//shallow copy grid and set the node into wall or unwall it.\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  if(row === START_NODE_ROW && col === START_NODE_COL) return grid;\n  if(row === FINISH_NODE_ROW && col === FINISH_NODE_COL) return grid;\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithStartNode = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isStart: !node.isStart,\n  };\n  START_NODE_ROW = row;\n  START_NODE_COL = col;\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\nconst getNewGridWithFinishNode = (grid, row, col) =>{\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isFinish: !node.isFinish,\n  };\n  FINISH_NODE_ROW = row;\n  FINISH_NODE_COL = col;\n  newGrid[row][col] = newNode;\n  return newGrid;\n}","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}