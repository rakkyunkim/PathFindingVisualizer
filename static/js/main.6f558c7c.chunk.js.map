{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/BFS.js","algorithms/DFS.js","algorithms/astar.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","onMouseLeave","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","getNodesInShortestPathOrderBFS","nodesInShortestPathOrder","currentNode","unshift","isNodeValid","GetDistance","Math","abs","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","state","mouseIsPressed","startNodePressed","finishNodePressed","visualFinished","visualInProgress","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","getNewGridWithStartNode","getNewGridWithFinishNode","slice","newNode","i","setTimeout","animateShortestPath","document","getElementById","node2","checkDirection","node1","row2","col2","innerHTML","reset","getNodesInShortestPathOrder","animateDijkstra","querySelector","innerText","endNode","queue","currNode","BFS","nodesInShortestPathOrderBFS","stack","pop","DFS","openSet","gCost","hCost","fCost","index","indexOf","splice","newCostToNeighbor","astar","withWall","onClick","visualizeDijkstra","visualizeBFS","visualizeDFS","visualizeAstar","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","handleMouseLeave","currentRow","createNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f558c7c.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      onMouseLeave,\n      row,\n    } = this.props;\n    const extraClassName = isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : ''\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}\n        onMouseLeave={() => onMouseLeave(row, col)}\n        >\n      </div>\n    );\n  }\n}\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  //stores neighbor nodes of node that is not yet visited.\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    //increment distance\n    neighbor.distance = node.distance + 1;\n    //set the previousNode for shortest path calculation later.\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  //extract column and row number from current node.\n  const {col, row} = node;\n  //insert neighboring nodes if not out of bounds\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  //only store neighbor that isn't visited yet.\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","\r\n//run breath-first search algorithm on grid.\r\nexport function BFS(grid, startNode, endNode){\r\n    const visitedNodesInOrder = [];\r\n    if(startNode === endNode){\r\n        return visitedNodesInOrder;\r\n    }\r\n    let queue = [startNode];\r\n    visitedNodesInOrder.push(startNode);\r\n    startNode.isVisited = true;\r\n\r\n    while(queue){\r\n        let currNode = queue.shift();\r\n        if(currNode.isWall) continue;\r\n        let neighbors = getUnvisitedNeighbors(currNode, grid);\r\n\r\n        for(let i = 0; i < neighbors.length; i++){\r\n            if(neighbors[i].isWall) continue;\r\n            queue.push(neighbors[i]);\r\n            visitedNodesInOrder.push(neighbors[i]);\r\n            neighbors[i].isVisited = true;\r\n            neighbors[i].previousNode = currNode;\r\n            if(neighbors[i] === endNode){\r\n                return visitedNodesInOrder;\r\n            }\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n// get all the surrounding neighbors of a node.\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  //extract column and row number from current node.\r\n  const {col, row} = node;\r\n    //insert neighboring nodes if not out of bounds\r\n\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n\r\n  //only store neighbor that isn't visited yet.\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\n// back-track using previous node.\r\nexport function getNodesInShortestPathOrderBFS(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }\r\n  ","\r\n//run breath-first search algorithm on grid.\r\nexport function DFS(grid, startNode, endNode){\r\n    const visitedNodesInOrder = [];\r\n    if(startNode === endNode){\r\n        return visitedNodesInOrder;\r\n    }\r\n    let stack = [startNode];\r\n\r\n    while(stack){\r\n        let currNode = stack.pop();\r\n        const {row, col} = currNode;\r\n        if(currNode.isWall) continue;\r\n        currNode.isVisited = true;\r\n        visitedNodesInOrder.push(currNode);\r\n\r\n        if(currNode === endNode){\r\n            return visitedNodesInOrder;\r\n        }\r\n\r\n        if(isNodeValid(row + 1, col, grid)){\r\n            stack.push(grid[row + 1][col]);\r\n            grid[row + 1][col].previousNode = currNode;\r\n        }\r\n        if(isNodeValid(row - 1, col, grid)){\r\n            stack.push(grid[row - 1][col]);\r\n            grid[row - 1][col].previousNode = currNode;\r\n        }\r\n        if(isNodeValid(row, col - 1, grid)){\r\n            stack.push(grid[row][col - 1]);\r\n            grid[row][col - 1].previousNode = currNode;\r\n        }\r\n        if(isNodeValid(row, col + 1, grid)){\r\n            stack.push(grid[row][col + 1]);\r\n            grid[row][col + 1].previousNode = currNode;\r\n        }\r\n    }\r\n    \r\n}\r\n//check if neighbor is out of bounds, or visited already\r\nfunction isNodeValid(row, col, grid) {\r\n    //false if out of bounds OR visited\r\n    if(row < 0 || row >= grid.length || col < 0 || col >= grid[0].length || grid[row][col].isVisited){\r\n        return false;\r\n    }\r\n  \r\n    return true;\r\n}\r\n","\r\nexport function astar(grid, startNode, endNode){\r\n    const visitedNodesInOrder = [];\r\n    const openSet = [];\r\n\r\n    if(startNode === endNode){\r\n        return visitedNodesInOrder;\r\n    }\r\n    startNode.gCost = 0;\r\n    endNode.hCost = 0;\r\n\r\n    visitedNodesInOrder.push(startNode);\r\n    openSet.push(startNode);\r\n\r\n    while(openSet.length > 0){\r\n        let node = openSet[0];\r\n        \r\n        for(let i = 1; i < openSet.length; i++){\r\n            if(openSet[i].fCost === Infinity) continue;\r\n            //choose the node with the lowest fCost.\r\n            if(openSet[i].fCost < node.fCost){\r\n                node = openSet[i];\r\n            }\r\n            //if fCost is the same, choose the node with lower hCost.\r\n            else if(openSet[i].fCost === node.fCost){\r\n                if(openSet[i].hCost < node.hCost){\r\n                    node = openSet[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        const index = openSet.indexOf(node);\r\n        if (index > -1) {\r\n            openSet.splice(index, 1);\r\n        }\r\n        node.isVisited = true;\r\n\r\n        if(node === endNode){\r\n            return visitedNodesInOrder;\r\n        }\r\n        const neighbors = getUnvisitedNeighbors(node, grid);\r\n\r\n        for(let i = 0; i < neighbors.length; i++){\r\n            if(neighbors[i].isWall){\r\n                continue;\r\n            }\r\n            const newCostToNeighbor = node.gCost + GetDistance(node, neighbors[i]);\r\n            if(newCostToNeighbor < neighbors[i].gCost || openSet.indexOf(neighbors[i]) === -1){\r\n                neighbors[i].gCost = newCostToNeighbor;\r\n                neighbors[i].hCost = GetDistance(neighbors[i], endNode);\r\n                neighbors[i].fCost = neighbors[i].gCost + neighbors[i].hCost;\r\n                neighbors[i].previousNode = node;\r\n                visitedNodesInOrder.push(neighbors[i]);\r\n                if(openSet.indexOf(neighbors[i]) === -1){\r\n                    openSet.push(neighbors[i]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n//g cost: distance from the starting node\r\n//h cost: distance from the end node\r\n//f cost: g cost + h cost\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    //extract column and row number from current node.\r\n    const {col, row} = node;\r\n      //insert neighboring nodes if not out of bounds\r\n  \r\n      if (row > 0) neighbors.push(grid[row - 1][col]);\r\n      if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n      if (col > 0) neighbors.push(grid[row][col - 1]);\r\n      if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  \r\n    //only store neighbor that isn't visited yet.\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction GetDistance(nodeA, nodeB) {\r\n    const dstCol = Math.abs(nodeA.col - nodeB.col); //x\r\n    const dstRow = Math.abs(nodeA.row - nodeB.row); //y\r\n\r\n    return dstCol + dstRow;\r\n    /*if (dstCol > dstRow)\r\n        return 14*dstRow + 10* (dstCol-dstRow);\r\n    return 14*dstCol + 10 * (dstRow-dstCol);*/\r\n}\r\n\r\n","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\r\nimport {BFS, getNodesInShortestPathOrderBFS} from '../algorithms/BFS';\r\nimport {DFS} from '../algorithms/DFS';\r\nimport {astar} from '../algorithms/astar';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nlet START_NODE_ROW = 10;\r\nlet START_NODE_COL = 15;\r\nlet FINISH_NODE_ROW = 10;\r\nlet FINISH_NODE_COL = 35;\r\n\r\nconst GRID_ROW = 30;\r\nconst GRID_COL = 60;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      startNodePressed: false,\r\n      finishNodePressed: false,\r\n      visualFinished: false,\r\n      visualInProgress: false\r\n    };\r\n  }\r\n\r\n  //set the grid when the program starts running. \r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  //set up the wall with the mouse click.\r\n  handleMouseDown(row, col) {\r\n    if(this.state.visualInProgress) return;\r\n    if(row === START_NODE_ROW && col === START_NODE_COL){\r\n      this.setState({startNodePressed: true, mouseIsPressed: true});\r\n    } else if(row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\r\n      this.setState({finishNodePressed: true, mouseIsPressed: true});\r\n    }else{\r\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n      this.setState({grid: newGrid, mouseIsPressed: true});\r\n    }\r\n  }\r\n\r\n  //dragging feature\r\n  handleMouseEnter(row, col) {\r\n    if(this.state.visualInProgress) return;\r\n    if (!this.state.mouseIsPressed) return;\r\n    if (this.state.startNodePressed === true){\r\n      const newGrid = getNewGridWithStartNode(this.state.grid, row, col);\r\n      this.setState({grid: newGrid});\r\n    }else if(this.state.finishNodePressed === true){\r\n      const newGrid = getNewGridWithFinishNode(this.state.grid, row, col);\r\n      this.setState({grid: newGrid});\r\n    }\r\n    else{\r\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n      this.setState({grid: newGrid});\r\n    }\r\n  }\r\n  handleMouseLeave(row, col) {\r\n    if (this.state.startNodePressed){\r\n      const newGrid = this.state.grid.slice();\r\n      const node = newGrid[row][col];\r\n      const newNode = {\r\n        ...node,\r\n        isStart: !node.isStart,\r\n      };\r\n      newGrid[row][col] = newNode;\r\n      this.setState({grid: newGrid});\r\n    } else if (this.state.finishNodePressed){\r\n      const newGrid = this.state.grid.slice();\r\n      const node = newGrid[row][col];\r\n      const newNode = {\r\n        ...node,\r\n        isFinish: !node.isFinish,\r\n      };\r\n      newGrid[row][col] = newNode;\r\n      this.setState({grid: newGrid});\r\n    }\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({mouseIsPressed: false});\r\n    this.setState({startNodePressed: false});\r\n    this.setState({finishNodePressed: false});\r\n  }\r\n\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 1; i < visitedNodesInOrder.length; i++) {\r\n      //if reached the finish node, start animating shortest path\r\n      if (i === visitedNodesInOrder.length - 1) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 5 * i);\r\n        return;\r\n      }\r\n      //change the style to visited node.\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 5 * i);\r\n    }\r\n    return 1;\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 1; i < nodesInShortestPathOrder.length - 1; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        const node2 = nodesInShortestPathOrder[i - 1];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n        this.checkDirection(node, node2);\r\n      }, 25 * i);\r\n    }\r\n    setTimeout(() => {\r\n      this.setState({visualInProgress: false});\r\n      this.setState({visualFinished: true});\r\n    }, 25*nodesInShortestPathOrder.length - 1);\r\n    \r\n  }\r\n\r\n  checkDirection(node1, node2){\r\n    //(nodesInShortestPathOrder[i], nodesInShortestPathOrder[i - 1]);\r\n    const row = node1.row;\r\n    const col = node1.col;\r\n    const row2 = node2.row;\r\n    const col2 = node2.col;\r\n\r\n    //down\r\n    if(row - 1 === row2){\r\n      document.getElementById(`node-${row}-${col}`).innerHTML = \"🢃\";\r\n    }\r\n    //up\r\n    else if(row + 1 === row2){\r\n      document.getElementById(`node-${row}-${col}`).innerHTML = \"🢁\";\r\n    }\r\n    //right\r\n    else if(col - 1 === col2){\r\n      document.getElementById(`node-${row}-${col}`).innerHTML = \"🢂\";\r\n    }\r\n    //left\r\n    else if(col + 1 === col2){\r\n      document.getElementById(`node-${row}-${col}`).innerHTML = \"🢀\";\r\n    }\r\n\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    if(this.state.visualInProgress === true) return;\r\n    if(this.state.visualFinished){\r\n      //reset\r\n      this.reset(true);\r\n      this.setState({visualFinished: false});\r\n    }\r\n    this.setState({visualInProgress: true});\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n\r\n    const heading = document.querySelector(\".algo-heading\");\r\n    heading.innerText = \"Dijkstra's Algorithm guarantees shortest path!😊\";\r\n  }\r\n\r\n  visualizeBFS(){\r\n    if(this.state.visualInProgress === true) return;\r\n    if(this.state.visualFinished){\r\n      //reset\r\n      this.reset(true);\r\n      this.setState({visualFinished: false});\r\n    }\r\n    this.setState({visualInProgress: true});\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = BFS(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrderBFS = getNodesInShortestPathOrderBFS(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrderBFS);\r\n    const heading = document.querySelector(\".algo-heading\");\r\n    heading.innerText = \"Breath-First Search guarantees shortest path!😊\";\r\n  }\r\n  visualizeDFS(){\r\n    if(this.state.visualInProgress === true) return;\r\n    if(this.state.visualFinished){\r\n      //reset\r\n      this.reset(true);\r\n      this.setState({visualFinished: false});\r\n    }\r\n    const heading = document.querySelector(\".algo-heading\");\r\n    heading.innerHTML = \"Depth-First Search does not guarantee shortest path😞\";\r\n    this.setState({visualInProgress: true});\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = DFS(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrderBFS = getNodesInShortestPathOrderBFS(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrderBFS);\r\n    \r\n  }\r\n  visualizeAstar(){\r\n    if(this.state.visualInProgress === true) return;\r\n    if(this.state.visualFinished){\r\n      //reset\r\n      this.reset(true);\r\n      this.setState({visualFinished: false});\r\n    }\r\n    const heading = document.querySelector(\".algo-heading\");\r\n    heading.innerHTML = \"A* Algorithm guarantees shortest path!😊\";\r\n    this.setState({visualInProgress: true});\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = astar(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrderBFS = getNodesInShortestPathOrderBFS(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrderBFS);\r\n  }\r\n  //reset the grid\r\n  reset(withWall){\r\n    if(withWall){\r\n      for (const row of this.state.grid) {\r\n        for (const node of row) {\r\n          node.isVisited = false;\r\n          node.previousNode = null;\r\n          node.distance = Infinity;\r\n          document.getElementById(`node-${node.row}-${node.col}`).innerHTML = ' ';\r\n          if(!node.isWall && !node.isStart && !node.isFinish){\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node';\r\n          }\r\n        }\r\n      }\r\n    }else{\r\n      for (const row of this.state.grid) {\r\n        for (const node of row) {\r\n          node.isVisited = false;\r\n          node.previousNode = null;\r\n          node.distance = Infinity;\r\n          node.isWall = false;\r\n          document.getElementById(`node-${node.row}-${node.col}`).innerHTML = ' ';\r\n          if(!node.isStart && !node.isFinish){\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node';\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n\r\n    return (\r\n      <>\r\n        <button onClick={() => this.visualizeDijkstra()}>\r\n          Visualize Dijkstra's Algorithm\r\n        </button>\r\n        <button onClick={() => this.visualizeBFS()}>\r\n          Visualize BFS Algorithm\r\n        </button>\r\n        <button onClick={() => this.visualizeDFS()}>\r\n          Visualize DFS Algorithm\r\n        </button>\r\n        <button onClick={() => this.visualizeAstar()}>\r\n          Visualize A* Algorithm\r\n        </button>\r\n        <button onClick={() => this.reset(true)}>\r\n          Reset Board w/ Walls\r\n        </button>\r\n        <button onClick={() => this.reset(false)}>\r\n          Reset Everything\r\n        </button>\r\n        <h2 className=\"algo-heading\">Welcome to algorithm visualizer. Choose your algorithm above.</h2> \r\n        <p>You can move the start node(green) and the finish node(red) by clicking and dragging.</p>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div className=\"row\" key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {row, col, isFinish, isStart, isWall} = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      onMouseLeave={(row, col) => this.handleMouseLeave(row, col)}\r\n                      row={row}></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < GRID_ROW; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < GRID_COL; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    gCost: Infinity,\r\n    hCost: Infinity,\r\n    fCost: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\n//shallow copy grid and set the node into wall or unwall it.\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  if(row === START_NODE_ROW && col === START_NODE_COL) return grid;\r\n  if(row === FINISH_NODE_ROW && col === FINISH_NODE_COL) return grid;\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithStartNode = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isStart: !node.isStart,\r\n  };\r\n  START_NODE_ROW = row;\r\n  START_NODE_COL = col;\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\nconst getNewGridWithFinishNode = (grid, row, col) =>{\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isFinish: !node.isFinish,\r\n  };\r\n  FINISH_NODE_ROW = row;\r\n  FINISH_NODE_COL = col;\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n}","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}